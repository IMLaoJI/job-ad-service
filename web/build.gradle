apply plugin: "org.springframework.boot"
apply plugin: "org.ajoberstar.grgit"
apply from: "${rootProject.rootDir}/gradle/maven-publish.gradle"
apply from: "${rootProject.rootDir}/gradle/liquibase.gradle"
apply plugin: "org.asciidoctor.convert"
apply from: "${rootProject.rootDir}/gradle/docker-compose.gradle"
project.ext {
    dockerImageName = "jobadservice"
}
apply from: "${rootProject.rootDir}/gradle/docker.gradle"

dependencies {
    compile project(":infrastructure-elasticsearch")
    compile project(":infrastructure-messagebroker")
    compile project(":infrastructure-service-reference")
    compile project(":infrastructure-elasticsearch")
    compile project(":infrastructure")

    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-actuator"

    compile "org.springframework.cloud:spring-cloud-starter"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    compile "org.springframework.retry:spring-retry"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    compile "org.springframework.cloud:spring-cloud-starter-config"
    compile 'ch.admin.seco.alv:alv-feign-starter'
    compile "ch.admin.seco.alv:alv-jwt-starter"
    compile "ch.admin.seco.alv:alv-spring-web-starter"
    compile "ch.admin.seco.alv:alv-error-handling"
    compile "ch.admin.seco.alv:alv-spring-springfox-swagger2"

    compile "org.springframework.security:spring-security-web"

    compile 'org.springframework.cloud:spring-cloud-starter-zipkin'

    compile "org.codehaus.jackson:jackson-core-asl"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner"

    compile 'com.googlecode.libphonenumber:libphonenumber'

    compile "org.jsoup:jsoup:1.11.3"
    compile 'org.postgresql:postgresql'

    runtime "org.liquibase:liquibase-core"
    runtime "com.mattbertolini:liquibase-slf4j"

    testCompile files(this.project(':domain').sourceSets.test.output)
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.security:spring-security-test"
    testCompile 'org.awaitility:awaitility'

    optional "org.springframework.boot:spring-boot-configuration-processor"
}

defaultTasks "bootRun"

bootJar {
    mainClassName = "ch.admin.seco.jobs.services.jobadservice.Application"
}

springBoot {
    buildInfo()
}

task stage(dependsOn: "bootJar") {
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

asciidoctor {
    attributes "base-url": "https://api.job-room.ch/0.2"
    attributes "api-url": "http://test-api.job-room.ch"
    inputs.dir "api-docs"
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources
