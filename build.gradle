buildscript {
    repositories {
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
        classpath 'org.ajoberstar:gradle-git:1.4.2'
    }
}

plugins {
    id "org.sonarqube" version "2.6.1"
    id "net.ltgt.apt-idea" version "0.13"
    id "io.spring.dependency-management" version "1.0.4.RELEASE"
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
}

group 'ch.admin.seco.jobs.services.jobadservice'
version '1.0-SNAPSHOT'

allprojects {

    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'propdeps'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.gorylenko.gradle-git-properties'
    apply plugin: 'checkstyle'
    apply plugin: 'idea'
    apply plugin: 'org.ajoberstar.grgit'

    defaultTasks 'bootRun'

    bootJar {
        mainClass = 'ch.admin.seco.jobs.services.jobadservice.Application'
    }

    springBoot {
        buildInfo()
    }
//apply from: 'gradle/checkstyle.gradle'
//apply from: 'gradle/docker.gradle'
//apply from: 'gradle/sonar.gradle'
//apply from: 'gradle/liquibase.gradle'
//apply from: 'gradle/mapstruct.gradle'
//apply from: 'gradle/docker.gradle'
//apply from: 'gradle/maven-publish.gradle'

    if (project.hasProperty('zipkin')) {
//    apply from: 'gradle/zipkin.gradle'
    }

    configurations {
        providedRuntime
        compile.exclude module: "spring-boot-starter-tomcat"
        // netty's native is pulled by spring-cloud-starter-ribbon, but is useless unless you explicitly add the native binary dependency.
        // Having it in the classpath without the binary can cause warnings
        all*.exclude group: 'io.netty', module: 'netty-transport-native-epoll'
    }

    repositories {
        maven { url 'http://repo.spring.io/milestone' }
        jcenter()
        maven { url 'https://alvch.jfrog.io/alvch/libs-releases' }
        maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
        maven { url 'https://oss.sonatype.org/content/repositories/releases' }
        maven { url 'http://repo.maven.apache.org/maven2' }
    }

    dependencies {
        compile "io.dropwizard.metrics:metrics-core:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-jvm:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-servlet:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-json:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}"
        compile("net.logstash.logback:logstash-logback-encoder:${logstash_logback_encoder_version}") {
            exclude(group: 'ch.qos.logback')
        }
        compile("com.ryantenney.metrics:metrics-spring:${metrics_spring_version}")
        compile("com.zaxxer:HikariCP:${hikaricp_version}")
        compile("org.liquibase:liquibase-core")
        compile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
        compile "org.apache.commons:commons-lang3:${commons_lang_version}"
        compile "org.springframework.boot:spring-boot-starter-data-jpa"
        //compile("org.springframework.boot:spring-boot-starter-data-elasticsearch:")
        compile "org.springframework.boot:spring-boot-starter-security"
        compile("org.springframework.boot:spring-boot-starter-web") {
            exclude module: 'spring-boot-starter-tomcat'
        }
        compile "org.springframework.boot:spring-boot-starter-undertow"
        compile "org.zalando:problem-spring-web:${problem_spring_web_version}"
        compile "org.springframework.cloud:spring-cloud-starter"
        compile "org.springframework.cloud:spring-cloud-starter-ribbon"
        compile "org.springframework.cloud:spring-cloud-starter-hystrix"
        compile "org.springframework.cloud:spring-cloud-starter-spectator"
        compile "org.springframework.retry:spring-retry"
        compile "org.springframework.cloud:spring-cloud-starter-eureka"
        compile "org.springframework.cloud:spring-cloud-starter-config"
        compile "org.springframework.cloud:spring-cloud-starter-feign"
        compile "org.springframework.boot:spring-boot-starter-cloud-connectors"
        compile "io.jsonwebtoken:jjwt:${jjwt_version}"
        compile "io.springfox:springfox-swagger2:${springfox_version}"
        compile "io.springfox:springfox-swagger-ui:${springfox_version}"
        compile "io.springfox:springfox-bean-validators:${springfox_version}"
        compile "org.postgresql:postgresql"
        compile "com.h2database:h2"
        compile "org.jsoup:jsoup:${jsoup_version}"

        testCompile "com.jayway.jsonpath:json-path"
        testCompile("org.springframework.boot:spring-boot-starter-test") {
            exclude group: 'com.vaadin.external.google', module: 'android-json'
        }
        testCompile "org.springframework.security:spring-security-test"
        testCompile "org.springframework.boot:spring-boot-test"
        testCompile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:' + spring_cloud_version
        }
    }

    clean {
        delete "target"
    }

    task cleanResources(type: Delete) {
        delete 'build/resources'
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.4'
    }

    task stage(dependsOn: 'bootJar') {
    }

    compileJava.dependsOn processResources
    processResources.dependsOn cleanResources, bootBuildInfo
    bootBuildInfo.mustRunAfter cleanResources

    checkstyle.configFile file('gradle/config/checkstyle.xml')
    checkstyleTest.enabled false

//import org.ajoberstar.grgit.*
//def repo = Grgit.open(dir: '.')
    afterEvaluate {
        bootJar {
            manifest {
                attributes(
                        (java.util.jar.Attributes.Name.IMPLEMENTATION_TITLE.toString()): project.name,
                        (java.util.jar.Attributes.Name.IMPLEMENTATION_VERSION.toString()): project.version,
                        (java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR.toString()): 'mimacom ag',
                        'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                        'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                        'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                        'Built-By': System.getProperty('user.name'),
                        'Built-On': "${InetAddress.localHost.hostName}/${InetAddress.localHost.hostAddress}",
                        'Spring-Version': org.springframework.core.SpringVersion.getVersion()
//                    'Git-Commit': repo.head().getAbbreviatedId(8),
//                    'Git-Branch': repo.branch.getCurrent().getName()
                )
            }
        }
    }
}